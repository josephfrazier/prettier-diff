#!/usr/bin/env node

const isGitRepo = require('is-git-repository').default
const isPathGlobal = require('is-path-global')
const path = require('path')
const yargs = require('yargs')
const fs = require('fs')
const cp = require('child_process')
const editorconfig = require('editorconfig')
const prettier = require('prettier')
const stringify = require('json-stable-stringify')
const tempWrite = require('temp-write')
const shell = require('shell-escape-tag').default

// https://github.com/prettier/prettier/tree/a707dda53b13a6956a825609f30baead7ef08a59#api
const defaultPrettierOptions = {
  printWidth: 80,
  tabWidth: 2,
  singleQuote: true,
  trailingComma: 'all',
  bracketSpacing: true
}

const args = process.argv.slice(2)
const hasGitArgs = args.length === 0 || !args.every(fs.existsSync)
const isDifftool = process.env.BASE

// If we're in a git repo, but not already running as a difftool,
// run as a difftool. This allows simpler syntax like
// `prettier-diff head^ bin/prettier-diff`
//
// TODO figure out why the `hasGitArgs` check is necessary to pass tests
if (isGitRepo() && hasGitArgs && !isDifftool) {
  const scriptName = process.argv[1]
  const command = shell`git difftool --no-prompt --extcmd=${scriptName} ${args}`
  pipeLessSync(command, {stdio: 'inherit'})
  process.exit()
}

const [fromPath, toPath] = parseArgs()

// If process.env.BASE is present, we're running as a git difftool,
// so use the correct paths. See https://git-scm.com/docs/git-difftool
const fromPathClean = cleanPath(fromPath)
const toPathClean = cleanPath(toPath)

function cleanPath (filepath) {
  return (filepath !== '/dev/null' && process.env.BASE) || filepath
}

const fromTmp = getMaybePrettifiedTmpFile(fromPath, fromPathClean)
const toTmp = getMaybePrettifiedTmpFile(toPath, toPathClean)

try {
  const diffOutput = cp
    .execSync(shell`git diff --color --no-index ${fromTmp} ${toTmp} | cat`)
    .toString()
    .replace(`--- a${fromTmp}`, `--- a/${fromPathClean}`)
    .replace(`+++ b${toTmp}`, `+++ a/${toPathClean}`)

  const command = shell`${__dirname}/../node_modules/.bin/diff-so-fancy`

  pipeLessSync(command, {
    input: diffOutput,
    stdio: ['pipe', 'inherit', 'inherit']
  })
} catch (err) {
  process.exitCode = err.status
} finally {
  unlinkTmp(fromTmp, fromPath)
  unlinkTmp(toTmp, toPath)
}

function editorConfigToPrettier (filepath = '') {
  const config = editorconfig.parseSync(filepath)
  // Object.create doesn't work here
  let result = JSON.parse(JSON.stringify(defaultPrettierOptions))
  result.tabWidth = config.tab_width || result.tabWidth
  result.printWidth = config.max_line_length || result.printWidth
  return result
}

function unlinkTmp (tmpPath, origPath) {
  if (tmpPath !== origPath) {
    fs.unlinkSync(tmpPath)
  }
}

function getMaybePrettifiedTmpFile (filepath, filepathClean) {
  if (!shouldPrettify(filepath)) {
    return filepath
  }

  const prettierOptions = editorConfigToPrettier(filepathClean)

  const content = fs.readFileSync(filepath).toString()
  const pretty = prettify(content, prettierOptions)
  const tmpPath = tempWrite.sync(pretty)

  return tmpPath
}

function shouldPrettify (filepath) {
  const extension = path.extname(filepath)
  return ['.js', '.json', ''].includes(extension)
}

function prettify (content, prettierOptions) {
  let pretty = content

  // try to format JS files
  try {
    pretty = prettier.format(content, prettierOptions)
  } catch (err) {}

  // try to format JSON files
  // prettier doesn't do this currently: https://github.com/prettier/prettier/issues/322
  try {
    pretty = jsonPrettify(content, prettierOptions)
  } catch (err) {}

  return pretty
}

function jsonPrettify (jsonString, prettierOptions) {
  const sorted = stringify(JSON.parse(jsonString), {
    space: prettierOptions.tabWidth
  })
  // Put a comma after strings, numbers, objects, arrays, `true`, `false`, or
  // `null` at the end of a line. See the grammar at http://json.org/
  return sorted.replace(/(["\d}\]el])$/gm, '$1,')
}

function pipeLessSync (command, options) {
  command += ' | less --tabs=2 -RFX'
  cp.execSync(command, options)
}

function parseArgs () {
  // yargs shows the full path to binaries that are in $PATH,
  // so work around that by substituting the basename if possible.
  // See https://github.com/yargs/yargs/issues/538
  let scriptName = process.argv[1]
  if (isPathGlobal(scriptName)) {
    scriptName = path.basename(scriptName)
  } else {
    scriptName = '$0'
  }

  return yargs
    .help()
    .version()
    .usage(`Usage: ${scriptName} <path> <path>`)
    .example(`${scriptName} test/js.js test/js.js.uglified`)
    .example(`${scriptName} test/json.json test/json.json.uglified`)
    .example(`git difftool --extcmd=${scriptName}`)
    .demandCommand(
      2,
      2,
      'Not enough arguments: got $0, need exactly 2',
      'Too many arguments: got $0, need exactly 2'
    ).argv._
}
